package net.paymate.data;

/**
 * Title:        $Source: /cvs/src/net/paymate/data/TxnReference.java,v $
 * Description:  txn unique id <-> txn lookup keys.
 *      if txnid is valid then we know which database entry is referenced
 *      else terminalid and STAN will be used to get txnid XOR
 *           terminalid and crefTime will be used to get txnid.
 *
 * Copyright:    Copyright (c) 2001
 * Company:      PayMate.net
 * @author PayMate.net
 * @version $Revision: 1.28 $
 */

import net.paymate.util.*;
import net.paymate.lang.StringX;

public class TxnReference implements isEasy /*, Comparable */{

  public Txnid txnId;

  public STAN httn= new STAN();
  public UTC crefTime= new UTC();
  //
  public Terminalid termid;
  //
  public String authrrn; // for gateways and such

  public static TxnReference clone(TxnReference old){
    TxnReference newone=new TxnReference();
    if(old.txnId!=null){
      newone.txnId=new Txnid(old.txnId.value());
    }
    newone.httn = new STAN(old.httn.value());
    newone.crefTime.setto(old.crefTime.getTime());
    if(old.termid!=null){
      newone.termid= new Terminalid(old.termid.value());
    }
    newone.authrrn=old.authrrn; // for gateways and such
    return newone;
  }

//  // how does this one compare to the other one?
//  public int compareTo(Object o) {
//    int comp = 0;
//    // try txnid's first
//    TxnReference other = (TxnReference)o;
//    if(Txnid.isValid(txnId)) {
//      if(Txnid.isValid(other.txnId)) {
//        comp = txnId.compareTo(other.txnId);
//      } else {
//        comp = 1; // this one is bigger
//      }
//    } else {
//      if(Txnid.isValid(other.txnId)) {
//        comp = -1; // this one is smaller
//      }
//    }
//    if(comp == 0) {
//      // use another criterion rather than just txnid's
//      // STAN's
//      if(STAN.isValid(httn)) {
//        if(STAN.isValid(other.httn)) {
//          comp = httn.compareTo(other.httn);
//        } else {
//          comp = 1; // this one is bigger
//        }
//      } else {
//        if(STAN.isValid(other.httn)) {
//          comp = -1; // this one is smaller
//        }
//      }
//    }
//    if(comp == 0) {
//      // use another criterion rather than txnid's and STAN's
//      // try clientreftimes before terminals (for sorting for orphaned receipt orders)
//      if(UTC.isValid(crefTime)) {
//        if(UTC.isValid(other.crefTime)) {
//          comp = httn.compareTo(other.crefTime);
//        } else {
//          comp = 1; // this one is bigger
//        }
//      } else {
//        if(UTC.isValid(other.crefTime)) {
//          comp = -1; // this one is smaller
//        }
//      }
//    }
//    if(comp == 0) {
//      // use another criterion rather than txnid's, STAN's, and clientreftime's
//      // terminalids
//      if(Terminalid.isValid(termid)) {
//        if(Terminalid.isValid(other.termid)) {
//          comp = httn.compareTo(other.termid);
//        } else {
//          comp = 1; // this one is bigger
//        }
//      } else {
//        if(Terminalid.isValid(other.termid)) {
//          comp = -1; // this one is smaller
//        }
//      }
//    }
//    if(comp == 0) {
//      // use another criterion rather than txnid's, STAN's, clientreftime's, and terminalid's
//      // authrrn's
//      if(StringX.NonTrivial(authrrn)) {
//        comp = StringX.compareStrings(authrrn, other.authrrn);
//      } else {
//        if(StringX.NonTrivial(other.authrrn)) {
//          comp = -1; // this one is smaller
//        }
//      }
//    }
//    // nothing else to try!  must be equal
//    return comp;
//  }

  /**
   * @return whether this was PROPERLY generated by a client standin process
   */
  public boolean isClientGenerated(){
    return !isValid() && looksValid();
  }

  public boolean isGatewayGenerated() {
    return StringX.NonTrivial(authrrn);
  }

  public static boolean NonTrivial(TxnReference probate){
    return probate!=null && probate.looksValid();
  }

  public TxnReference setStan(STAN httn){
    this.httn=httn;
    return this;
  }

  public TxnReference setReftime(UTC crefTime){
    this.crefTime=crefTime;
    return this;
  }

  public TxnReference setTermid(Terminalid terminalid){
    this.termid=terminalid;
    return this;
  }

  public TxnReference setId(Txnid txnId){
    this.txnId=txnId;
    return this;
  }

////////////////////////////////
  private TxnReference() {//will be invalid and look invalid
    txnId=new Txnid();
    termid=new Terminalid();
    httn= new STAN();
    crefTime= new UTC();
  }

  public static TxnReference New(){
    return new TxnReference();
  }

  public static TxnReference New(Txnid txnId,Terminalid terminalid, STAN httn,UTC crefTime) {
    return New().setId(txnId).setTermid(terminalid).setStan(httn).setReftime(crefTime);
  }

  public static TxnReference New(Terminalid terminalid, STAN httn,UTC crefTime) {
    return New().setTermid(terminalid).setStan(httn).setReftime(crefTime);
  }

  public static TxnReference New(Terminalid terminalid, UTC crefTime) {
    return New().setTermid(terminalid).setReftime(crefTime);
  }

  public static TxnReference New(Terminalid terminalid, STAN httn) {
    return New().setTermid(terminalid).setStan(httn);
  }

  public static TxnReference New(Terminalid terminalid, String humaninput) {
    return New(terminalid, STAN.NewFrom(humaninput));
  }

  public static TxnReference New(Txnid txnId){
    return New().setId(txnId);
  }

  public static TxnReference New(EasyCursor ezc){
    TxnReference newone= New();
    newone.load(ezc);
    return newone;
  }

  /**
   * @return whether human sourced info SEEMS legit.
   */
  public boolean looksValid(){
    return Terminalid.isValid(termid) && (STAN.isValid(httn)  || crefTime.isValid() || StringX.NonTrivial(authrrn));
  }

  /**
   * @return whether could be present in database
   */
  public boolean isValid(){
    return txnId.isValid();
  }

  private boolean equals(TxnReference other){
    if(other==null){
      return false;
    }
    if(txnId.isValid()){
      return txnId.equals(other.txnId);
    }
    if(other.txnId.isValid()){
      return false;
    }
    if(this.termid.equals(other.termid)) { //both must be client references
      if (STAN.isValid(httn)){
        return httn.equals(other.httn);
      }
      if(this.crefTime.equals(other.crefTime)) {
        return true;
      }
      // else both must be gateway references, but standin gave us two trivials!
      if(isGatewayGenerated() && StringX.equalStrings(authrrn, other.authrrn)) {
        return true;
      }
    }
    // no criteria are met
    return false;
  }


  public boolean equals(Object obj){
    return obj!=null && obj instanceof TxnReference && equals((TxnReference)obj);
  }

  public boolean sameStan(STAN other){
    return STAN.isValid(httn) && httn.equals(other);
  }

  public String refNum(){
    String arf=null;
    if(httn.isValid()){
      return arf=String.valueOf(httn);
    }
    return arf=crefTime.toString(8,8+9);
  }

  public static String refNum(UTC reftime) {
    return reftime.toString(8,8+9);
  }
  public static String refNum(String reftime) {
    return refNum(UTC.New(reftime));
  }

  public void setReferenceTime(UTC u){
    crefTime=u;
  }

  public UTC refTime(){
    return crefTime;
  }

  public STAN STAN(){
    return httn;
  }

//////////////////////////
// transport
  final static String crefTimeKey="crefTime";

  public void save(EasyCursor ezp){
    txnId.saveIfValid(ezp);
    //we save off the following info even if the above is valid, for efficiency and debug
    termid.saveIfValid(ezp); //was missing for a long time, can't rely upon it yet
    httn.saveIfValid(ezp);
    if(crefTime.isValid()){
      ezp.setUTC(crefTimeKey,crefTime);
    }
  }

  public void load(EasyCursor ezp){
    txnId.load(ezp);
    termid.load(ezp); //was missing for a long time, can't rely upon it yet
    httn.load(ezp);
    crefTime=ezp.getUTC(crefTimeKey);
  }

  /**
   * for repairing legacy requests, from instances prior to 1.18
   */
  public TxnReference patch(Terminalid terminalID,UTC requestInitiationTime){
    if(!termid.isValid()){
      termid = new Terminalid(terminalID.value());//copy for sanity's sake
    }
    if(!crefTime.isValid()){
      crefTime.setto(requestInitiationTime);
    }
    return this;
  }
  //
  ////////////////////////////

  public String toSpam(){
    return
    txnId.isValid()? ("TxnId:"+txnId):
    ("Termid:"+termid+" STAN:"+httn+" cref:"+crefTime);
  }

}
//$Id: TxnReference.java,v 1.28 2003/10/25 20:34:21 mattm Exp $